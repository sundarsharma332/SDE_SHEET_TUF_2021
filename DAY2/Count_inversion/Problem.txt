Inversion Count for an array indicates â€“ how far (or close) the array is from being sorted. If the array is already sorted, then the inversion count is 0, but if the array is sorted in the reverse order, the inversion count is the maximum. 
Formally speaking, two elements a[i] and a[j] form an inversion if a[i] > a[j] and i < j 
Example: 

Input: arr[] = {8, 4, 2, 1}
Output: 6

Explanation: Given array has six inversions:
(8, 4), (4, 2), (8, 2), (8, 1), (4, 1), (2, 1).


Input: arr[] = {3, 1, 2}
Output: 2

Explanation: Given array has two inversions:
(3, 1), (3, 2) 

https://practice.geeksforgeeks.org/problems/inversion-of-array-1587115620/1


METHOD 1 (Simple)  

    Approach: Traverse through the array, and for every index, find the number of smaller elements on its right side of the array. This can be done using a nested loop. Sum up the counts for all index in the array and print the sum.
    Algorithm: 
        Traverse through the array from start to end
        For every element, find the count of elements smaller than the current number up to that index using another loop.
        Sum up the count of inversion for every index.
        Print the count of inversions.



Method 2 : 
Enhanced Merge Sort
Algorithm: 

    The idea is similar to merge sort, divide the array into two equal or almost equal halves in each step until the base case is reached.
    Create a function merge that counts the number of inversions when two halves of the array are merged, create two indices i and j, i is the index for the first half, and j is an index of the second half. if a[i] is greater than a[j], then there are (mid â€“ i) inversions. because left and right subarrays are sorted, so all the remaining elements in left-subarray (a[i+1], a[i+2] â€¦ a[mid]) will be greater than a[j].
    Create a recursive function to divide the array into halves and find the answer by summing the number of inversions is the first half, the number of inversion in the second half and the number of inversions by merging the two.
    The base case of recursion is when there is only one element in the given half.
    Print the answer